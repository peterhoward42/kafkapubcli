*  Requirements
	*  Waits for ever on terminal user input lines
	*  Each line sent to kafka topic at host - both defined as envar
	*  Show succes/error response in response
*  High Level Design
	*  Research client mo to see if needs separate go routines
		*  Use https://github.com/segmentio/kafka-go Writer API
	*  CLI should probably send the messages to an message queue interface
	*  Go routines and clean close down - don't abs need - so don't bother yet
*  Start with recommended app template 
*  Put in simple go makefile from umli to do linting etc
o  work up from cmd
	*  hello world cmd runnable from make run
	*  fetch config
	*  instantiate kafka prod based on config
	*  define a repl type with a NewRepl that takes a Producer IF arg
	*  get make targets working
	*  make the repl loop and echo input
	*  make the repl write to kafka
		*  code it up to point where expect it to fail with no kafka (timeout)
	o  dockerify the app and show it can be run locally
		*  find template
		*  where std place to put it?
		*  best practice for location of docker file=/build
		*  best practice for location of main source = /cmd/appname.go
		*  don't ignore build/
		o  get steps to work, and capture cmd line
		o  what does the -il do?
		o  put comment in about how to debug
		o  replace with real cmd
		o  make sure built image is ignored
		o  commit as is
	o  delete unwanted images
	o  put docker build cmds into make target		
	o  add it to docker compose in integ test